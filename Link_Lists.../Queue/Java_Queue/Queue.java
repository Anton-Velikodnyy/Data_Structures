/*
 *	Created by Anton Velikodnyy & edited by Daniel Tellier on 6/27/17.
 *	Copyright Â© 2017 Anton Velikodnyy. All rights reserved.
 *	May be distributed for the use of teaching purposes.
 */

/**
 *	Container for the storage of data given.
 *	{@code Node} contains the pointer to the next instances in the chain of
 *	nodes generated by {@Queue}.
 */
class Node<U> {
	
	/**
	 *	Stores a generic immutable object.
	 */
	private final U data;
	
	/**
	 *	Pointer to the next node in the chain.
	 */
	protected  Node<U> next;
	
	//----------------------------------------------------------------------------
	/**
	 *	Constructor of this {@code Node} class.
	 *
	 *	@param data  takes given object and stores in this Node.
	 *	@param next  sets another Node as the next pointer of this Node.
	 */
	protected Node (U data, Node<U> next) {
		this.data = data;
		this.next = next;
	}
	
	/**
	 *	Prints the data that is stored in this Node.
	 *
	 *	@return data in string form.
	 */
	@Override
	public String toString () {
		return data.toString();
	}
}

/**
 *	Queue is an object which creates and manages a chain of nodes stored
 *	in memory.
 *	<p>
 *	This class accepts any data type and can only directly access the
 *	head or tail of the chain of nodes it manages.
 */
public class Queue<T>  {
	
	
	//----------------------------------------------------------------------------
	/**
	 *	Stores pointer to starting Node of the chain.
	 */
	private Node<T> headNode = null;
	
	//----------------------------------------------------------------------------
	/**
	 *	Inserts Node instance at the start of the chain.
	 *	<p>
	 *	If the chain is empty, the following actions occur:
	 *	<p><ol>
	 *	<li>Node instance created.
	 *	<li>This class' headNode becomes a pointer to this Node.
	 *	<li>The chain is made circular.
	 *	</ol><p>
	 *	If the chain is not empty, the following actions occur:
	 *	<p><ol>
	 *	<li>Node instance created with its next pointer being the headNode.next.
	 *	<li>headNode's will now point to freshNode.
	 *	<li>This chain is rotated so that the freshNode is now headNode.
	 *	</ol><p>
	 *
	 *	@param data  is an Object, who's data-type matches the initially declared
	 *	data-type of this class, to be stored.
	 */
	public void firstIn (T data) {
		if (this.isEmpty()) {
			headNode = new Node<T> (data, null);
			headNode.next = headNode;
		}
		else {
			Node<T> freshNode = new Node<T> (data, headNode.next);
			headNode.next = freshNode;
			headNode = freshNode;
		}
	}
	
	//----------------------------------------------------------------------------
	/**
	 *	Removes Node instance located at the end of the chain.
	 *	<p>
	 *	If isEmpty()} is false, the following actions occur.
	 *	<p></ol>
	 *	<li>If headNode and its next are the same, both are set to null.
	 *	<li>Else headNode's next points to its next, allowing the garbage collector
	 *	to erase the node that has nothing pointing to it anymore.
	 *	</ol><p>
	 */
	public void firstOut () {
		if (!this.isEmpty()) {
			if (headNode == headNode.next){
				headNode = null;
			}
			else {
				headNode.next = headNode.next.next;
			}
		}
	}
 
	//----------------------------------------------------------------------------
	/**
	 *	Checks to see if this class is managing a chain of Nodes.
	 *
	 *	@return true if chain of Nodes exists, false otherwise.
	 */
	private boolean isEmpty () {
		return (headNode == null);
	}
 
	//----------------------------------------------------------------------------
	/**
	 *	Converts the chain of Nodes, through itteration, into a String.
	 *	<p>
	 *	The order of the Node instances are printed from headNode.next to headNode.
	 *	<p>
	 *	Returns an emtpy string ("") if chain is empty.
	 *
	 *	@return String that contains all the values in the chain of Nodes.
	 */
	@Override
	public String toString() {
		if (headNode != null)  {
			Node<T> currentNode = headNode.next;
			StringBuilder builder = new StringBuilder();
			do  {
				builder.append(currentNode + " ");
				currentNode = currentNode.next;
			}while (currentNode != headNode.next);
			
			return builder.toString();
		}
		return "";
	}
	
	//----------------------------------------------------------------------------
	/**
	 *	Tests this Queue class for possible errors.
	 *
	 *	@param args  command-line arguments in array form.
	 */
	public static void main (String... args){
		Queue<Integer> list = new Queue<Integer>();
		System.out.println (list);
		list.firstIn(1);
		list.firstIn(2);
		list.firstIn(3);
		list.firstIn(4);
		list.firstIn(5);
		list.firstIn(6);
		list.firstIn(7);
		System.out.println (list);
		list.firstOut();
		list.firstOut();
		System.out.println (list);
		list.firstOut();
		list.firstOut();
		System.out.println (list);
		list.firstIn(1);
		list.firstIn(2);
		System.out.println (list);
		
	}
}
